#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Aug 15 14:49:35 2022

@author: Michael
"""

import numpy as np
import os
import itertools

### INPUTS USED IF CALLING THIS FUNCTION DIRECTLY ###
path = './'
seq_file = 'TopPeps.csv'
seq_col = 'Seq'


#### STUFF BELOW HERE SHOULD NOT NORMALLY NEED TO BE CHANGED ####

res_dict = {'ARG': 'R', "HIE": "H", "LYS" : "K", "ASP" : "D", "GLU" : "E",
            "SER" : "S", "THR": "T", "ASN" : "N", "GLN" : "Q", "CYS" : "C", 
            "GLY" : "G", "PRO" : "P", "ALA" : "A", "ILE" : "I", "LEU" : "L",
            "MET":"M", "PHE" : "F", "TRP": "W", "TYR": "Y", "VAL": "V"}
AA_types = list(res_dict.keys())

#masses of amino acids (in Daltons)
res_masses = {'R' : 174, "H" : 155, "K" : 146, "D" : 133, "E" : 147,
              "S" : 105, "T" : 119,"N" : 132, "Q" : 146, "C" : 121, 
              "G" : 75, "P" : 115, "A" : 89, "I" : 131, "L" : 131,
              "M" : 149, "F" : 165, "W" : 204,  "Y": 181, "V": 117}

def TopPep_AA_Frequency(path, 
                        dirs=[''], 
                        seq_file='Top50Seq.txt', 
                        outfile='AminoAcidFrequency.csv',
                        outfile_2mer='AminoAcidPairFrequency.csv',
                        max_ngram=1):    
    
    filetype = seq_file.split('.')[-1]
    if filetype == 'csv':
        import pandas as pd
        
    AAs = res_dict.values()
    AA_pairs=[f'{AA1}{AA2}' for [AA1, AA2] in list(itertools.product(AAs,AAs))]
    
    for d in dirs:
        print(f'Processing {d}')
        filename = os.path.join(path, d,seq_file)
        
        if filetype == 'txt':
            peps = []
            try:
                with open(filename, 'r') as f:
                    f.readline() #skip header info
                    for line in f:
                        peps.append(line.split()[0])
            except FileNotFoundError:
                print (f'No file found for {d}!')
                continue
    
        #csv file format generated by programs other than PepBD at moment
        elif filetype == 'csv':
            df = pd.read_csv(filename)
            peps = list(df[seq_col])
        
        else:
            print('file type not recognized! Ending program')
            continue
        
        #count amino acids in the peptides
        num_peps = len(peps)

        composition_1 = {value:0 for value in AAs} #stores single amino acid frequencies
        composition_2 = {value:0 for value in AA_pairs} #stores single amino acid frequencies
        
        #check if peptide amino acids need to be converted from 3-letter form to 1-letter form
        test_pep = peps[0]
        if len(test_pep.split()) > 1:
            conv_pep_flag = True
            pep_len = len(test_pep.split())
        else:
            conv_pep_flag = False
            pep_len = len(test_pep)
        
        for pep in peps:
            #if needed, convert amino acid from 3 letter name to 1 letter name
            if conv_pep_flag:
                pep = pep.split()
                
                if len(pep[0]) == 4:
                    pep[0] = pep[0][1:]
                if len(pep[-1]) == 4:
                    pep[-1] = pep[-1][1:]
                
                pep_conv = ''
                for AA in pep:
                    pep_conv += res_dict[AA]
                pep = pep_conv
                
            #count amino acid frequencies in peptide
            for AA in pep:
                composition_1[AA] += 1
            
            #count 2-amino acid frequencies in peptide
            for AA1, AA2 in zip(pep[:-1], pep[1:]):
                if AA1 < AA2:
                   composition_2[f'{AA1}{AA2}'] += 1 
                else:
                   composition_2[f'{AA2}{AA1}'] += 1 
                   
        #print out single amino acid frequencies
        freqs = np.array(list(composition_1.values()))/(num_peps * pep_len)
        with open(os.path.join(path, d,outfile), 'w') as f: 
            f.write('Amino_Acid,Frequency\n')
            for index, AA in enumerate(AAs):
                f.write(f'{AA},{freqs[index]:.2f}\n')
        
        #print out 2-amino acid frequencies
        freqs_2mer = np.array(list(composition_2.values()))/(num_peps*(pep_len-1))
        with open(os.path.join(path, d,outfile_2mer), 'w') as f: 
            f.write('Amino_Acid_2mer,Frequency\n')
            for index, AA_pair in enumerate(AA_pairs):
                f.write(f'{AA_pair},{freqs_2mer[index]:.4f}\n')
                
if __name__ == '__main__':
    TopPep_AA_Frequency(path, seq_file=seq_file)